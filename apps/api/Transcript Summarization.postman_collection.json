{
	"info": {
		"_postman_id": "1946e044-5b83-4f6b-9c00-dda0f57174ad",
		"name": "Transcript Summarization",
		"description": "Transcript Summarization API helps creating uploading transcripts for processing as well as fetching details of past summaries",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27217372"
	},
	"item": [
		{
			"name": "File upload using GraphQL",
			"item": [
				{
					"name": "File Upload using graphQL - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'data' property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'createSummary' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"createSummary\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'createSummary' contains a valid 'jobId' \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.createSummary).to.have.property(\"jobId\").to.be.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "x-apollo-operation-name",
								"value": "createSummary"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "operations",
									"value": "{\"query\":\"mutation ($file: Upload!) {\\n  createSummary(createSummaryInput: { inputFile: $file }) {\\n    jobId\\n  }\\n}\"}",
									"description": "Parameterized GraphQL query to upload file for processing",
									"type": "text"
								},
								{
									"key": "map",
									"value": "{\"0\": [\"variables.file\"]}",
									"description": "Used to map the uploaded file and GraphQL query",
									"type": "text"
								},
								{
									"key": "0",
									"description": "Transcript file uploaded from local machine for processing. Allowed extensions: .txt, .vtt",
									"type": "file",
									"src": "/home/testuser/Downloads/sample-transcript.txt"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows uploading of a .txt or .vtt file for processing"
					},
					"response": []
				},
				{
					"name": "File Upload using graphQL - No Attachments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'errors' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");",
									"});",
									"pm.test(\"message: File missing in the request.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"message\").contain(\"File missing in the request.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "x-apollo-operation-name",
								"value": "createSummary"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "operations",
									"value": "{\"query\":\"mutation ($file: Upload!) {\\n  createSummary(createSummaryInput: { inputFile: $file }) {\\n    jobId\\n  }\\n}\"}",
									"description": "Parameterized GraphQL query to upload file for processing",
									"type": "text"
								},
								{
									"key": "map",
									"value": "{\"0\": [\"variables.file\"]}",
									"description": "Used to map the uploaded file and GraphQL query",
									"type": "text"
								},
								{
									"key": "0",
									"description": "Transcript file uploaded from local machine for processing. Allowed extensions: .txt, .vtt",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows uploading of a .txt or .vtt file for processing"
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to uploading files using graphQL"
		},
		{
			"name": "Fetch all Summaries",
			"item": [
				{
					"name": "Fetch All Summaries - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'data' property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'summaries' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"summaries\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'summaries' array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.summaries).to.have.property(\"summaries\").to.be.an(\"array\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  summaries(\n    options: {\n      limit: 10\n      offset: 0\n      sortOrder: ASC\n      search: \"John Doe\" # Remove search if you want complete data\n      filters: [ # Remove filter if you want complete data\n        { field: \"createdOn\", operator: \"gte\", value: \"2023-01-01\" } # Specify the date range to fetch record\n        { field: \"createdOn\", operator: \"lte\", value: \"2024-09-01\" } # Specify the upper limit for the date range\n        # { field: \"createdBy\", operator: \"in\", value: \"[\\\"user@example.com\\\",\\\"admin@example.com\\\"]\" } # Specify the email id of the person whose record you want to find\n      ]\n    }\n  ) {\n    limit\n    offset\n    summaries {\n      createdBy\n      createdOn\n      jobId\n      inputFile\n      jobStatus\n      modifiedBy\n      modifiedOn\n      outputText\n      status\n    }\n    total\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully fetching all summaries based on the options passed"
					},
					"response": []
				},
				{
					"name": "Fetch All Summaries - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'errors' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");",
									"});",
									"pm.test(\"message: Unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"message\", \"Unauthorized\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  summaries(\n    options: {\n      limit: 10\n      offset: 0\n      sortOrder: ASC\n      search: \"John Doe\" # Remove search if you want complete data\n      filters: [ # Remove filter if you want complete data\n        { field: \"createdOn\", operator: \"gte\", value: \"2023-01-01\" } # Specify the date range to fetch record\n        { field: \"createdOn\", operator: \"lte\", value: \"2024-09-01\" } # Specify the upper limit for the date range\n        # { field: \"createdBy\", operator: \"in\", value: \"[\\\"user@example.com\\\",\\\"admin@example.com\\\"]\" } # Specify the email id of the person whose record you want to find\n      ]\n    }\n  ) {\n    limit\n    offset\n    summaries {\n      createdBy\n      createdOn\n      jobId\n      inputFile\n      jobStatus\n      modifiedBy\n      modifiedOn\n      outputText\n      status\n    }\n    total\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully fetching all summaries based on the options passed"
					},
					"response": []
				},
				{
					"name": "Fetch All Summaries - Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for fetching summaries with bad request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  summaries(\n    options: {\n      unknownValue: \"Some unknown parameter\",\n      limit: 10\n      offset: 0\n      sortOrder: ASC\n      search: \"John Doe\" # Remove search if you want complete data\n      filters: [ # Remove filter if you want complete data\n        { field: \"createdOn\", operator: \"gte\", value: \"2023-01-01\" } # Specify the date range to fetch record\n        { field: \"createdOn\", operator: \"lte\", value: \"2024-09-01\" } # Specify the upper limit for the date range\n        { field: \"createdBy\", operator: \"in\", value: \"[\\\"user@example.com\\\",\\\"admin@example.com\\\"]\" } # Specify the email id of the person whose record you want to find\n      ]\n    }\n  ) {\n    limit\n    offset\n    summaries {\n      createdBy\n      createdOn\n      jobId\n      inputFile\n      jobStatus\n      modifiedBy\n      modifiedOn\n      outputText\n      status\n    }\n    total\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully fetching all summaries based on the options passed"
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching all summaries"
		}
	]
}